name: Laravel CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - Testing-Doc-Branch
      - Docker-Branch
      - CI-CD-Branch
  pull_request:
    branches: 
      - main

jobs:
  # ==================== STAGE 1, 2, 3: BUILD, LINT & TEST JOB ====================
  build-and-test:
    name: Build, Lint & Test
    runs-on: ubuntu-latest
    
    # CRITICAL FIX 1: Access the Database Secrets Environment
    environment: Database Secrets 
    
    services:
      mysql:
        image: mysql:8.0
        env:
          # Secrets are now available because of 'environment: Database Secrets'
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        # Removed 'ports' for cleaner CI execution
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -p${{ secrets.DB_PASSWORD }} --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐘 Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, json, bcmath, pdo, pdo_mysql, tokenizer, openssl, zip, gd
          coverage: none
          tools: composer:v2
          
      - name: 📦 Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: 🎼 Install Composer Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 📦 Install NPM Dependencies
        run: npm install
        
      # ===== COPY ENVIRONMENT FILE (Secrets Fix Applied) =====
      - name: 📋 Copy Environment File
        run: |
          cp .env.example .env
          # Use shell variables ($) which are passed via the step's env block below
          cat > .env << EOF
          APP_NAME=Laravel
          APP_ENV=testing
          APP_KEY=base64:$(php artisan key:generate --show)
          APP_DEBUG=true
          APP_URL=http://localhost
          
          DB_CONNECTION=mysql
          DB_HOST=mysql # CRITICAL FIX 2: Correct Hostname
          DB_PORT=3306
          DB_DATABASE=${{ env.DB_DATABASE }}
          DB_USERNAME=${{ env.DB_USERNAME }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          
          CACHE_DRIVER=array
          CACHE_STORE=array
          SESSION_DRIVER=array
          QUEUE_CONNECTION=sync
          
          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          MAIL_MAILER=log
          EOF
          echo "=== .env file created ==="
        env:
          # CRITICAL FIX 3: Pass Environment Secrets as step-level ENV variables
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      - name: ⚙️ Clear Config & Cache
        run: php artisan config:clear
        
      # ===== WAIT FOR MYSQL TO BE READY (Host/User Fix Applied) =====
      - name: 🗄️ Wait for MySQL to be Ready
        env:
          MYSQL_PWD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            # Use 'root' and the DB_PASSWORD secret for reliable initial ping
            if mysqladmin ping -h mysql -P 3306 -u root --silent; then 
              echo "MySQL is ready!"
              break
            fi
            echo "Attempt $i: MySQL not ready yet, waiting..."
            sleep 2
          done
          
      # ===== RUN DATABASE MIGRATIONS (Redundancy Removed) =====
      - name: 🔄 Run Database Migrations
        # Relies on the .env file and config cache being cleared
        run: php artisan migrate --force

      # ===== RUN PHPUNIT TESTS (Redundancy Removed) =====
      - name: 🧪 Execute PHPUnit Tests
        # Relies on the .env file
        run: php artisan test --parallel
        
      # ===== RUN LARAVEL PINT (CODE STYLE) =====
      - name: 🎨 Run Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test
        continue-on-error: true
        
      - name: 🏗️ Build Frontend Assets
        run: npm run build
        continue-on-error: true

  # ==================== STAGE 4, 5: DOCKER BUILD & DEPLOY JOB ====================
  docker-build-deploy:
    name: Build & Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    # CRITICAL FIX 4: Conditional Deployment requires SUCCESS of 'build-and-test'
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    # CRITICAL FIX 5: Access the Docker Hub Credentials Environment
    environment: Docker Hub Credentials
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # These secrets are now available because of 'environment: Docker Hub Credentials'
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: 📦 Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/laravel-notes-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/php/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/laravel-notes-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/laravel-notes-app:buildcache,mode=max
          
      - name: ✅ Deployment Summary
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "📦 Docker image pushed to Docker Hub"
          echo "🔗 Image: ${{ secrets.DOCKER_USERNAME }}/laravel-notes-app"